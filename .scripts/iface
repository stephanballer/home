#!/bin/sh
# Copyright (C) 2014 Julien Bonjean <julien@bonjean.info>
# Copyright (C) 2014 Alexander Keller <github@nycroth.com>

# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

#------------------------------------------------------------------------

# Use the provided interface, otherwise the device used for the default route.
IF="${IFACE:-$BLOCK_INSTANCE}"
IF="${IF:-$(ip route | awk '/^default/ { print $5 ; exit }')}"

if [[ ${IF:0:1} == "w" ]]; then
	echo -n " "
else
	echo -n " ";
fi


# Exit if there is no default route
[[ -z "$IF" ]] && exit

#------------------------------------------------------------------------

# As per #36 -- It is transparent: e.g. if the machine has no battery or wireless
# connection (think desktop), the corresponding block should not be displayed.
[[ ! -d /sys/class/net/${IF} ]] && exit

#------------------------------------------------------------------------

AF=${ADDRESS_FAMILY:-inet6?}
LABEL="${LABEL:-}"

for flag in "$1" "$2"; do
  case "$flag" in
    -4)
      AF=inet ;;
    -6)
      AF=inet6 ;;
    -L)
      if [[ "$IF" = "" ]]; then
        LABEL="iface "
      else
        LABEL="$IF: "
      fi ;;
  esac
done

#if [[ "$IF" = "" ]] || [[ "$(cat /sys/class/net/$IF/operstate)" = 'down' ]]; then
#  echo "${LABEL}down" # full text
#  echo "${LABEL}down" # short text
#  #echo \#FF0000 # color
#  exit
#fi

# if no interface is found, use the first device with a global scope
IPADDR=$(ip addr show $IF | perl -n -e "/$AF ([^ \/]+).* scope global/ && print \$1 and exit")

#case $BLOCK_BUTTON in
#  3) echo -n "$IPADDR" | xclip -q -se c ;;
#esac

#------------------------------------------------------------------------

#while [[ $# -gt 1 ]]; do
#    key="$1"
#    case "$key" in
#        -i|--inlabel)
#            INLABEL="$2"
#            shift;;
#        -o|--outlabel)
#            OUTLABEL="$2"
#            shift;;
#    esac
#    shift
#done


echo -n "$LABEL$IPADDR" # short text

#[[ -z "$INLABEL" ]] && INLABEL="IN "
#[[ -z "$OUTLABEL" ]] && OUTLABEL="OUT "

# Use the provided interface, otherwise the device used for the default route.
#if [[ -z $INTERFACE ]] && [[ -n $BLOCK_INSTANCE ]]; then
  #INTERFACE=$BLOCK_INSTANCE
#elif [[ -z $INTERFACE ]]; then
  #INTERFACE=$(ip route | awk '/^default/ { print $5 ; exit }')
#fi

# Exit if there is no default route
#[[ -z "$INTERFACE" ]] && exit

# TODO idk what this means but by commenting it out everything seems to work fine
# Issue #36 compliant.
#if ! [ -e "/sys/class/net/${IF}/operstate" ] || \
#    (! [ "$TREAT_UNKNOWN_AS_UP" = "1" ] &&
#    ! [ "`cat /sys/class/net/${IF}/operstate`" = "up" ])
#then
#    exit 0
#fi

# path to store the old results in
path="/dev/shm/$(basename $0)-${IF}"

# grabbing data for each adapter.
read rx < "/sys/class/net/${IF}/statistics/rx_bytes"
read tx < "/sys/class/net/${IF}/statistics/tx_bytes"

# get time
time=$(date +%s)

# write current data if file does not exist. Do not exit, this will cause
# problems if this file is sourced instead of executed as another process.
if ! [[ -f "${path}" ]]; then
  echo "${time} ${rx} ${tx}" > "${path}"
  chmod 0666 "${path}"
fi

# read previous state and update data storage
read old < "${path}"
echo "${time} ${rx} ${tx}" > "${path}"

# parse old data and calc time passed
old=(${old//;/ })
time_diff=$(( $time - ${old[0]} ))

# sanity check: has a positive amount of time passed
[[ "${time_diff}" -gt 0 ]] || exit 0

# calc bytes transferred, and their rate in byte/s
rx_diff=$(( $rx - ${old[1]} ))
tx_diff=$(( $tx - ${old[2]} ))
rx_rate=$(( $rx_diff / $time_diff ))
tx_rate=$(( $tx_diff / $time_diff ))


# shift by 10 bytes to get KiB/s. If the value is larger than
# 1024^2 = 1048576, then display MiB/s instead

# incoming
echo -n "    $INLABEL"
rx_kib=$(( $rx_rate >> 10 ))
if hash bc 2>/dev/null && [[ "$rx_rate" -gt 1048576 ]]; then
  printf '%sM' "`echo "scale=1; $rx_kib / 1024" | bc`"
else
  echo -n "${rx_kib}K"
fi

echo -n " "

# outgoing
echo -n "$OUTLABEL"
tx_kib=$(( $tx_rate >> 10 ))
if hash bc 2>/dev/null && [[ "$tx_rate" -gt 1048576 ]]; then
  printf '%sM\n' "`echo "scale=1; $tx_kib / 1024" | bc`"
else
  echo "${tx_kib}K"
fi
